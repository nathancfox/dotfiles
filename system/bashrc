# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

install_bashrc_support() {
    local distrotype
    distrotype=$(distrotype)

    packages=()

    # Nothing statement to test sudo authentication first
    sudo echo -n ""

    if [[ $distrotype == "redhat" ]]
    then
        sudo yum install $(for pkg in ${packages[@]}; do echo -n "$pkg "; done)
    elif [[ $distrotype == "debian" ]]
    then
        sudo apt install $(for pkg in ${packages[@]}; do echo -n "$pkg "; done)
    else
        echo "Automatic distro detection failed. Please install manually."
        echo "Package List"
        echo "------------"
        for pkg in ${packages[@]}
        do
            echo $pkg
        done
    fi
}
        

# Environment
export VISUAL=vim
export EDITOR=vim
export HISTFILESIZE=10000
export HISTSIZE=500
export HISTCONTROL=erasedups:ignoredups:ignorespace

shopt -s checkjobs
shopt -s checkwinsize
shopt -s cmdhist
shopt -s histappend
shopt -s lithist

iactive=$(expr index "$-" i) # tests if shell is interactive
# inputrc
if [[ $iactive > 0 ]];
then
    bind "set bell-style none" 
    bind "set completion-ignore-case on"
    # bind "set show-all-if-ambiguous on"
    bind "set completion-query-items 60"
    bind "set skip-completed-text on"
fi

# color man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Aliases
# ------

alias ldatetime="date +'%Y-%m-%d %H:%M:%S'"
alias sdatetime="date +'%y%m%d_%H%M%S'"
alias ldate="date +'%Y-%m-%d'"
alias sdate="date +'%y%m%d'"
alias ltime="date +'%H:%M:%S'"
alias stime="date +'%H%M%S'"
alias bc="bc -l"
alias grep="grep -E"
alias vimrc="vim $HOME/.vimrc"
alias bashrc="vim $HOME/.bashrc"
alias loadbashrc="source $HOME/.bashrc"
alias cp="cp -i"
alias mv="mv -i"
alias rm="rm -I"
alias mkdir="mkdir -p"
alias shist="history | grep "
alias hist="history | less"
alias sps="ps aux | grep "


# Functions
# ---------

extract () {
    for archive in $*; do
        if [[ -f $archive ]]; then
            case $archive in
				*.tar.bz2)   tar -xvjf $archive    ;;
				*.tar.gz)    tar -xvzf $archive    ;;
				*.bz2)       bunzip2 $archive     ;;
				*.gz)        gunzip $archive      ;;
				*.tar)       tar -xvf $archive     ;;
				*.tbz2)      tar -xvjf $archive    ;;
				*.tgz)       tar -xvzf $archive    ;;
				*.zip)       unzip $archive       ;;
            esac
        else
            echo "$archive is not a supported file!"
        fi
    done
}

parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

gitlogshort() {
    git log --pretty=oneline --abbrev-commit --max-count=16
}

# This allows me to set a teleportation checkpoint for quick
# temporary customizable leaps around the file tree.
#
# "flag set" stores the current working directory as a "checkpoint".
# "flag jump" jumps to the stored checkpoint, if it exists. If you are
#     already there, then it jumps to the place from where you last
#     jumped to the stored checkpoint.
# "flag clear" clears the stored checkpoint if it exists.
# "flag read" reads the current stored checkpoing if it exists.

# Setup
export FLAG=""
export FLAG_BAK=""

flag () {
  option=$1

  if [[ $option = "set" ]]; then
    echo "Flag set at: $(pwd)"
    export FLAG="$(pwd)"
    export FLAG_BAK=""
  elif [[ $option = "jump" ]]; then
    if [[ $FLAG != "" ]]; then
      if [[ $(pwd) != $FLAG ]]; then
        export FLAG_BAK="$(pwd)"
        cd $FLAG
      else
        cd $FLAG_BAK
      fi
    else
      echo "Error: No flag set."
    fi
  elif [[ $option = "clear" ]]; then
    if [[ $FLAG != "" ]]; then
      export FLAG=""
      echo "Flag cleared."
    else
      echo "Error: No flag set."
    fi
  elif [[ $option = "read" ]]; then
    if [[ $FLAG != "" ]]; then
      echo "Flag set at: $FLAG"
    else
      echo "No flag set."
    fi
  else
    echo "Error: Invalid option. Must be one of {set, jump, clear, read}."
  fi
}
# Shortcut alias for flag jump because I'm lazy
jump () {
  flag jump
}

runtime() {
    let d1=$1
    let d2=$2
    if [[ $d1 -eq $d2 ]]
    then
        printf "0 days, 0 hours, 0 minutes, 0 seconds"
	return
    elif [[ $d1 -gt $d2 ]]
    then
        dt=$(echo "d1 - d2" | bc -l)
    elif [[ $d1 -lt $d2 ]]
    then
        dt=$(echo "$d2 - $d1" | bc -l)
    fi
    dd=$(echo "$dt/86400" | bc)
    dt2=$(echo "$dt-86400*$dd" | bc)
    dh=$(echo "$dt2/3600" | bc)
    dt3=$(echo "$dt2-3600*$dh" | bc)
    dm=$(echo "$dt3/60" | bc)
    ds=$(echo "$dt3-60*$dm" | bc)
    printf "%d days, %d hours, %d minutes, %d seconds" $dd $dh $dm $ds
    return
}

gitdiffn () {
    USAGE="Usage: gitdiffn [-a] NCOMMITS\n\nDisplay the changes made NCOMMITS ago. The current commit is 1.\n\n  -a,  --all    Display all changes since NCOMMITS ago\n"
    if [[ $# -gt 2 || $# -lt 1 ]]; then
        printf "$USAGE"
        return
    fi
    if [[ $# == 1 ]]; then
        ALL=FALSE
        n_commits=$1
    else
        if ! [[ $1 == "-a" || $1 == "--all" ]]; then
            printf "$USAGE"
            return
        fi
        ALL=TRUE
        n_commits=$2
    fi
    if [[ $n_commits == "0" ]]; then
        printf "$USAGE"
        return
    fi
    if ! [[ $n_commits =~ ^[0-9]+$ ]]; then
        printf "$USAGE"
        return
    fi
    n_available_commits=$(git log | grep "^commit" | wc -l)
    if [[ $n_commits -gt $n_available_commits ]]; then
        printf "$USAGE"
        return
    fi
    commit=$(git log | grep "^commit" | head -n $(($n_commits+1)) | tail -n1 | awk '{print $2}')
    penultimate_commit=$(git log | grep "^commit" | head -n $(($n_commits)) | tail -n1 | awk '{print $2}')
    empty_tree_commit="4b825dc642cb6eb9a060e54bf8d69288fbee4904"  # This is a standard git commit hash for the empty tree
    if [[ $n_commits == $n_available_commits ]]; then
        commit=$empty_tree_commit
    fi
    if [[ $ALL == "TRUE" ]]; then
        git diff $commit HEAD
    else
        if [[ $n_commits -gt 1 ]]; then
            git diff $commit $penultimate_commit
        else
            git diff $commit HEAD
        fi
    fi
}

filesizes () {
    USAGE="Usage: filesizes TOP_N\n\nDisplay the summary file sizes of all objects in the current directory.\n"
    if [[ $# -gt 1 ]]; then
        printf "$USAGE"
        return
    elif [[ $# -eq 0 ]]; then
        du -sh * | sort -rh -k1,1
    elif [[ $1 -lt 0 ]]; then
        printf "$USAGE"
        return
    else
        du -sh * | sort -rh -k1,1 | head -n $1
    fi
}

prange () {
    USAGE="Usage: prange BEGIN END FILE\n\nDisplay the given inclusive range of lines in a file.\nEND must be greater than BEGIN.\n"
    if ! [[ $# -eq 3 ]]; then
        printf "$USAGE"
        return
    elif [[ $1 -gt $2 ]]; then
        printf "$USAGE"
        return
    fi
    RANGE_SIZE=$(($2 - $1 + 1))
    head -n $2 $3 | tail -n $RANGE_SIZE
}


# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ "$color_prompt" = yes ]; then
    PS1='[\[\033[0;32m\]\u\[\033[00m\] \[\033[0;34m\]\W\[\033[31m\]$(parse_git_branch)\[\033[00m\]]$ '
else
    PS1='[\u \W$(parse_git_branch)]$ '
fi
unset color_prompt
